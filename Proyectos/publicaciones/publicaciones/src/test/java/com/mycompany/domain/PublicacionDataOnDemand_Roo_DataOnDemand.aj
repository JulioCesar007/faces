// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.domain;

import com.mycompany.domain.Categoria;
import com.mycompany.domain.Publicacion;
import com.mycompany.domain.PublicacionDataOnDemand;
import com.mycompany.domain.Usuario;
import com.mycompany.service.PublicacionService;
import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PublicacionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PublicacionDataOnDemand: @Component;
    
    private Random PublicacionDataOnDemand.rnd = new SecureRandom();
    
    private List<Publicacion> PublicacionDataOnDemand.data;
    
    @Autowired
    PublicacionService PublicacionDataOnDemand.publicacionService;
    
    public Publicacion PublicacionDataOnDemand.getNewTransientPublicacion(int index) {
        Publicacion obj = new Publicacion();
        setCantidad(obj, index);
        setCategoria(obj, index);
        setDescripcion(obj, index);
        setDuracion(obj, index);
        setEstado(obj, index);
        setFechaCreacion(obj, index);
        setPrecio(obj, index);
        setTipo(obj, index);
        setTitulo(obj, index);
        setUsuario(obj, index);
        return obj;
    }
    
    public void PublicacionDataOnDemand.setCantidad(Publicacion obj, int index) {
        Integer cantidad = new Integer(index);
        obj.setCantidad(cantidad);
    }
    
    public void PublicacionDataOnDemand.setCategoria(Publicacion obj, int index) {
        Categoria categoria = null;
        obj.setCategoria(categoria);
    }
    
    public void PublicacionDataOnDemand.setDescripcion(Publicacion obj, int index) {
        String descripcion = "descripcion_" + index;
        obj.setDescripcion(descripcion);
    }
    
    public void PublicacionDataOnDemand.setDuracion(Publicacion obj, int index) {
        Integer duracion = new Integer(index);
        obj.setDuracion(duracion);
    }
    
    public void PublicacionDataOnDemand.setEstado(Publicacion obj, int index) {
        Character estado = new Character('N');
        obj.setEstado(estado);
    }
    
    public void PublicacionDataOnDemand.setFechaCreacion(Publicacion obj, int index) {
        Date fechaCreacion = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFechaCreacion(fechaCreacion);
    }
    
    public void PublicacionDataOnDemand.setPrecio(Publicacion obj, int index) {
        BigDecimal precio = BigDecimal.valueOf(index);
        if (precio.compareTo(new BigDecimal("99999999.99")) == 1) {
            precio = new BigDecimal("99999999.99");
        }
        obj.setPrecio(precio);
    }
    
    public void PublicacionDataOnDemand.setTipo(Publicacion obj, int index) {
        Character tipo = new Character('N');
        obj.setTipo(tipo);
    }
    
    public void PublicacionDataOnDemand.setTitulo(Publicacion obj, int index) {
        String titulo = "titulo_" + index;
        if (titulo.length() > 100) {
            titulo = titulo.substring(0, 100);
        }
        obj.setTitulo(titulo);
    }
    
    public void PublicacionDataOnDemand.setUsuario(Publicacion obj, int index) {
        Usuario usuario = null;
        obj.setUsuario(usuario);
    }
    
    public Publicacion PublicacionDataOnDemand.getSpecificPublicacion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Publicacion obj = data.get(index);
        Integer id = obj.getCodigo();
        return publicacionService.findPublicacion(id);
    }
    
    public Publicacion PublicacionDataOnDemand.getRandomPublicacion() {
        init();
        Publicacion obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCodigo();
        return publicacionService.findPublicacion(id);
    }
    
    public boolean PublicacionDataOnDemand.modifyPublicacion(Publicacion obj) {
        return false;
    }
    
    public void PublicacionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = publicacionService.findPublicacionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Publicacion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Publicacion>();
        for (int i = 0; i < 10; i++) {
            Publicacion obj = getNewTransientPublicacion(i);
            try {
                publicacionService.savePublicacion(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
