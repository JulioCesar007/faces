// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.domain;

import com.mycompany.domain.PublicacionDataOnDemand;
import com.mycompany.domain.PublicacionIntegrationTest;
import com.mycompany.service.PublicacionService;
import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect PublicacionIntegrationTest_Roo_IntegrationTest {
    
    declare @type: PublicacionIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: PublicacionIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: PublicacionIntegrationTest: @Transactional;
    
    @Autowired
    private PublicacionDataOnDemand PublicacionIntegrationTest.dod;
    
    @Autowired
    PublicacionService PublicacionIntegrationTest.publicacionService;
    
    @Test
    public void PublicacionIntegrationTest.testCountAllPublicacions() {
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to initialize correctly", dod.getRandomPublicacion());
        long count = publicacionService.countAllPublicacions();
        Assert.assertTrue("Counter for 'Publicacion' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void PublicacionIntegrationTest.testFindPublicacion() {
        Publicacion obj = dod.getRandomPublicacion();
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to initialize correctly", obj);
        Integer id = obj.getCodigo();
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to provide an identifier", id);
        obj = publicacionService.findPublicacion(id);
        Assert.assertNotNull("Find method for 'Publicacion' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Publicacion' returned the incorrect identifier", id, obj.getCodigo());
    }
    
    @Test
    public void PublicacionIntegrationTest.testFindAllPublicacions() {
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to initialize correctly", dod.getRandomPublicacion());
        long count = publicacionService.countAllPublicacions();
        Assert.assertTrue("Too expensive to perform a find all test for 'Publicacion', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Publicacion> result = publicacionService.findAllPublicacions();
        Assert.assertNotNull("Find all method for 'Publicacion' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Publicacion' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void PublicacionIntegrationTest.testFindPublicacionEntries() {
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to initialize correctly", dod.getRandomPublicacion());
        long count = publicacionService.countAllPublicacions();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Publicacion> result = publicacionService.findPublicacionEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Publicacion' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Publicacion' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void PublicacionIntegrationTest.testSavePublicacion() {
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to initialize correctly", dod.getRandomPublicacion());
        Publicacion obj = dod.getNewTransientPublicacion(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Publicacion' identifier to be null", obj.getCodigo());
        publicacionService.savePublicacion(obj);
        obj.flush();
        Assert.assertNotNull("Expected 'Publicacion' identifier to no longer be null", obj.getCodigo());
    }
    
    @Test
    public void PublicacionIntegrationTest.testDeletePublicacion() {
        Publicacion obj = dod.getRandomPublicacion();
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to initialize correctly", obj);
        Integer id = obj.getCodigo();
        Assert.assertNotNull("Data on demand for 'Publicacion' failed to provide an identifier", id);
        obj = publicacionService.findPublicacion(id);
        publicacionService.deletePublicacion(obj);
        obj.flush();
        Assert.assertNull("Failed to remove 'Publicacion' with identifier '" + id + "'", publicacionService.findPublicacion(id));
    }
    
}
