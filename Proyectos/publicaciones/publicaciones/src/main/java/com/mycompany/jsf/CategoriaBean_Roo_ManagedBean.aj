// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.jsf;

import com.mycompany.domain.Categoria;
import com.mycompany.domain.Publicacion;
import com.mycompany.jsf.CategoriaBean;
import com.mycompany.jsf.converter.CategoriaConverter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CategoriaBean_Roo_ManagedBean {
    
    declare @type: CategoriaBean: @ManagedBean(name = "categoriaBean");
    
    declare @type: CategoriaBean: @SessionScoped;
    
    private String CategoriaBean.name = "Categorias";
    
    private Categoria CategoriaBean.categoria;
    
    private List<Categoria> CategoriaBean.allCategorias;
    
    private boolean CategoriaBean.dataVisible = false;
    
    private List<String> CategoriaBean.columns;
    
    private HtmlPanelGrid CategoriaBean.createPanelGrid;
    
    private HtmlPanelGrid CategoriaBean.editPanelGrid;
    
    private HtmlPanelGrid CategoriaBean.viewPanelGrid;
    
    private boolean CategoriaBean.createDialogVisible = false;
    
    private List<Categoria> CategoriaBean.selectedCategorias;
    
    private List<Publicacion> CategoriaBean.selectedPublicacions;
    
    @PostConstruct
    public void CategoriaBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("descripcion");
    }
    
    public String CategoriaBean.getName() {
        return name;
    }
    
    public List<String> CategoriaBean.getColumns() {
        return columns;
    }
    
    public List<Categoria> CategoriaBean.getAllCategorias() {
        return allCategorias;
    }
    
    public void CategoriaBean.setAllCategorias(List<Categoria> allCategorias) {
        this.allCategorias = allCategorias;
    }
    
    public String CategoriaBean.findAllCategorias() {
        allCategorias = Categoria.findAllCategorias();
        dataVisible = !allCategorias.isEmpty();
        return null;
    }
    
    public boolean CategoriaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CategoriaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CategoriaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CategoriaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CategoriaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CategoriaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText categoriasCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasCreateOutput.setId("categoriasCreateOutput");
        categoriasCreateOutput.setValue("Categorias:   ");
        htmlPanelGrid.getChildren().add(categoriasCreateOutput);
        
        HtmlOutputText categoriasCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasCreateInput.setId("categoriasCreateInput");
        categoriasCreateInput.setValue("This relationship is managed from the Categoria side");
        htmlPanelGrid.getChildren().add(categoriasCreateInput);
        
        Message categoriasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriasCreateInputMessage.setId("categoriasCreateInputMessage");
        categoriasCreateInputMessage.setFor("categoriasCreateInput");
        categoriasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriasCreateInputMessage);
        
        HtmlOutputText publicacionsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        publicacionsCreateOutput.setId("publicacionsCreateOutput");
        publicacionsCreateOutput.setValue("Publicacions:   ");
        htmlPanelGrid.getChildren().add(publicacionsCreateOutput);
        
        HtmlOutputText publicacionsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        publicacionsCreateInput.setId("publicacionsCreateInput");
        publicacionsCreateInput.setValue("This relationship is managed from the Publicacion side");
        htmlPanelGrid.getChildren().add(publicacionsCreateInput);
        
        Message publicacionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        publicacionsCreateInputMessage.setId("publicacionsCreateInputMessage");
        publicacionsCreateInputMessage.setFor("publicacionsCreateInput");
        publicacionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(publicacionsCreateInputMessage);
        
        HtmlOutputText padreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        padreCreateOutput.setId("padreCreateOutput");
        padreCreateOutput.setValue("Padre:   ");
        htmlPanelGrid.getChildren().add(padreCreateOutput);
        
        AutoComplete padreCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        padreCreateInput.setId("padreCreateInput");
        padreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.padre}", Categoria.class));
        padreCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{categoriaBean.completePadre}", List.class, new Class[] { String.class }));
        padreCreateInput.setDropdown(true);
        padreCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "padre", String.class));
        padreCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{padre.nombre} #{padre.descripcion}", String.class));
        padreCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{padre}", Categoria.class));
        padreCreateInput.setConverter(new CategoriaConverter());
        padreCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(padreCreateInput);
        
        Message padreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        padreCreateInputMessage.setId("padreCreateInputMessage");
        padreCreateInputMessage.setFor("padreCreateInput");
        padreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(padreCreateInputMessage);
        
        HtmlOutputText nombreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMaximum(20);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        HtmlOutputText descripcionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion: * ");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputTextarea descripcionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.descripcion}", String.class));
        LengthValidator descripcionCreateInputValidator = new LengthValidator();
        descripcionCreateInputValidator.setMaximum(100);
        descripcionCreateInput.addValidator(descripcionCreateInputValidator);
        descripcionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText categoriasEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasEditOutput.setId("categoriasEditOutput");
        categoriasEditOutput.setValue("Categorias:   ");
        htmlPanelGrid.getChildren().add(categoriasEditOutput);
        
        HtmlOutputText categoriasEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasEditInput.setId("categoriasEditInput");
        categoriasEditInput.setValue("This relationship is managed from the Categoria side");
        htmlPanelGrid.getChildren().add(categoriasEditInput);
        
        Message categoriasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriasEditInputMessage.setId("categoriasEditInputMessage");
        categoriasEditInputMessage.setFor("categoriasEditInput");
        categoriasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriasEditInputMessage);
        
        HtmlOutputText publicacionsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        publicacionsEditOutput.setId("publicacionsEditOutput");
        publicacionsEditOutput.setValue("Publicacions:   ");
        htmlPanelGrid.getChildren().add(publicacionsEditOutput);
        
        HtmlOutputText publicacionsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        publicacionsEditInput.setId("publicacionsEditInput");
        publicacionsEditInput.setValue("This relationship is managed from the Publicacion side");
        htmlPanelGrid.getChildren().add(publicacionsEditInput);
        
        Message publicacionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        publicacionsEditInputMessage.setId("publicacionsEditInputMessage");
        publicacionsEditInputMessage.setFor("publicacionsEditInput");
        publicacionsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(publicacionsEditInputMessage);
        
        HtmlOutputText padreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        padreEditOutput.setId("padreEditOutput");
        padreEditOutput.setValue("Padre:   ");
        htmlPanelGrid.getChildren().add(padreEditOutput);
        
        AutoComplete padreEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        padreEditInput.setId("padreEditInput");
        padreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.padre}", Categoria.class));
        padreEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{categoriaBean.completePadre}", List.class, new Class[] { String.class }));
        padreEditInput.setDropdown(true);
        padreEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "padre", String.class));
        padreEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{padre.nombre} #{padre.descripcion}", String.class));
        padreEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{padre}", Categoria.class));
        padreEditInput.setConverter(new CategoriaConverter());
        padreEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(padreEditInput);
        
        Message padreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        padreEditInputMessage.setId("padreEditInputMessage");
        padreEditInputMessage.setFor("padreEditInput");
        padreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(padreEditInputMessage);
        
        HtmlOutputText nombreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMaximum(20);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        HtmlOutputText descripcionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion: * ");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputTextarea descripcionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.descripcion}", String.class));
        LengthValidator descripcionEditInputValidator = new LengthValidator();
        descripcionEditInputValidator.setMaximum(100);
        descripcionEditInput.addValidator(descripcionEditInputValidator);
        descripcionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText categoriasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasLabel.setId("categoriasLabel");
        categoriasLabel.setValue("Categorias:   ");
        htmlPanelGrid.getChildren().add(categoriasLabel);
        
        HtmlOutputText categoriasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriasValue.setId("categoriasValue");
        categoriasValue.setValue("This relationship is managed from the Categoria side");
        htmlPanelGrid.getChildren().add(categoriasValue);
        
        HtmlOutputText publicacionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        publicacionsLabel.setId("publicacionsLabel");
        publicacionsLabel.setValue("Publicacions:   ");
        htmlPanelGrid.getChildren().add(publicacionsLabel);
        
        HtmlOutputText publicacionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        publicacionsValue.setId("publicacionsValue");
        publicacionsValue.setValue("This relationship is managed from the Publicacion side");
        htmlPanelGrid.getChildren().add(publicacionsValue);
        
        HtmlOutputText padreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        padreLabel.setId("padreLabel");
        padreLabel.setValue("Padre:   ");
        htmlPanelGrid.getChildren().add(padreLabel);
        
        HtmlOutputText padreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        padreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.padre}", Categoria.class));
        padreValue.setConverter(new CategoriaConverter());
        htmlPanelGrid.getChildren().add(padreValue);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:   ");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        InputTextarea descripcionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.descripcion}", String.class));
        descripcionValue.setReadonly(true);
        descripcionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        return htmlPanelGrid;
    }
    
    public Categoria CategoriaBean.getCategoria() {
        if (categoria == null) {
            categoria = new Categoria();
        }
        return categoria;
    }
    
    public void CategoriaBean.setCategoria(Categoria categoria) {
        this.categoria = categoria;
    }
    
    public List<Categoria> CategoriaBean.getSelectedCategorias() {
        return selectedCategorias;
    }
    
    public void CategoriaBean.setSelectedCategorias(List<Categoria> selectedCategorias) {
        if (selectedCategorias != null) {
            categoria.setCategorias(new HashSet<Categoria>(selectedCategorias));
        }
        this.selectedCategorias = selectedCategorias;
    }
    
    public List<Publicacion> CategoriaBean.getSelectedPublicacions() {
        return selectedPublicacions;
    }
    
    public void CategoriaBean.setSelectedPublicacions(List<Publicacion> selectedPublicacions) {
        if (selectedPublicacions != null) {
            categoria.setPublicacions(new HashSet<Publicacion>(selectedPublicacions));
        }
        this.selectedPublicacions = selectedPublicacions;
    }
    
    public List<Categoria> CategoriaBean.completePadre(String query) {
        List<Categoria> suggestions = new ArrayList<Categoria>();
        for (Categoria categoria : Categoria.findAllCategorias()) {
            String categoriaStr = String.valueOf(categoria.getNombre() +  " "  + categoria.getDescripcion());
            if (categoriaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(categoria);
            }
        }
        return suggestions;
    }
    
    public String CategoriaBean.onEdit() {
        if (categoria != null && categoria.getCategorias() != null) {
            selectedCategorias = new ArrayList<Categoria>(categoria.getCategorias());
        }
        if (categoria != null && categoria.getPublicacions() != null) {
            selectedPublicacions = new ArrayList<Publicacion>(categoria.getPublicacions());
        }
        return null;
    }
    
    public boolean CategoriaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CategoriaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CategoriaBean.displayList() {
        createDialogVisible = false;
        findAllCategorias();
        return "categoria";
    }
    
    public String CategoriaBean.displayCreateDialog() {
        categoria = new Categoria();
        createDialogVisible = true;
        return "categoria";
    }
    
    public String CategoriaBean.persist() {
        String message = "";
        if (categoria.getCodigo() != null) {
            categoria.merge();
            message = "Successfully updated";
        } else {
            categoria.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorias();
    }
    
    public String CategoriaBean.delete() {
        categoria.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorias();
    }
    
    public void CategoriaBean.reset() {
        categoria = null;
        selectedCategorias = null;
        selectedPublicacions = null;
        createDialogVisible = false;
    }
    
    public void CategoriaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
