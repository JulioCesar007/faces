// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.jsf;

import com.mycompany.domain.Bloguer;
import com.mycompany.domain.Mensaje;
import com.mycompany.jsf.MensajeBean;
import com.mycompany.jsf.converter.BloguerConverter;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect MensajeBean_Roo_ManagedBean {
    
    declare @type: MensajeBean: @ManagedBean(name = "mensajeBean");
    
    declare @type: MensajeBean: @SessionScoped;
    
    private String MensajeBean.name = "Mensajes";
    
    private Mensaje MensajeBean.mensaje;
    
    private List<Mensaje> MensajeBean.allMensajes;
    
    private boolean MensajeBean.dataVisible = false;
    
    private List<String> MensajeBean.columns;
    
    private HtmlPanelGrid MensajeBean.createPanelGrid;
    
    private HtmlPanelGrid MensajeBean.editPanelGrid;
    
    private HtmlPanelGrid MensajeBean.viewPanelGrid;
    
    private boolean MensajeBean.createDialogVisible = false;
    
    @PostConstruct
    public void MensajeBean.init() {
        columns = new ArrayList<String>();
        columns.add("contenido");
    }
    
    public String MensajeBean.getName() {
        return name;
    }
    
    public List<String> MensajeBean.getColumns() {
        return columns;
    }
    
    public List<Mensaje> MensajeBean.getAllMensajes() {
        return allMensajes;
    }
    
    public void MensajeBean.setAllMensajes(List<Mensaje> allMensajes) {
        this.allMensajes = allMensajes;
    }
    
    public String MensajeBean.findAllMensajes() {
        allMensajes = Mensaje.findAllMensajes();
        dataVisible = !allMensajes.isEmpty();
        return null;
    }
    
    public boolean MensajeBean.isDataVisible() {
        return dataVisible;
    }
    
    public void MensajeBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid MensajeBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void MensajeBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid MensajeBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void MensajeBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid MensajeBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void MensajeBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid MensajeBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText bloguerCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bloguerCreateOutput.setId("bloguerCreateOutput");
        bloguerCreateOutput.setValue("Bloguer:   ");
        htmlPanelGrid.getChildren().add(bloguerCreateOutput);
        
        AutoComplete bloguerCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bloguerCreateInput.setId("bloguerCreateInput");
        bloguerCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mensajeBean.mensaje.bloguer}", Bloguer.class));
        bloguerCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{mensajeBean.completeBloguer}", List.class, new Class[] { String.class }));
        bloguerCreateInput.setDropdown(true);
        bloguerCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bloguer", String.class));
        bloguerCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bloguer.nombre}", String.class));
        bloguerCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bloguer}", Bloguer.class));
        bloguerCreateInput.setConverter(new BloguerConverter());
        bloguerCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bloguerCreateInput);
        
        Message bloguerCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bloguerCreateInputMessage.setId("bloguerCreateInputMessage");
        bloguerCreateInputMessage.setFor("bloguerCreateInput");
        bloguerCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bloguerCreateInputMessage);
        
        HtmlOutputText contenidoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contenidoCreateOutput.setId("contenidoCreateOutput");
        contenidoCreateOutput.setValue("Contenido: * ");
        htmlPanelGrid.getChildren().add(contenidoCreateOutput);
        
        InputTextarea contenidoCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        contenidoCreateInput.setId("contenidoCreateInput");
        contenidoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mensajeBean.mensaje.contenido}", String.class));
        LengthValidator contenidoCreateInputValidator = new LengthValidator();
        contenidoCreateInputValidator.setMaximum(140);
        contenidoCreateInput.addValidator(contenidoCreateInputValidator);
        contenidoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(contenidoCreateInput);
        
        Message contenidoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contenidoCreateInputMessage.setId("contenidoCreateInputMessage");
        contenidoCreateInputMessage.setFor("contenidoCreateInput");
        contenidoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contenidoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid MensajeBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText bloguerEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bloguerEditOutput.setId("bloguerEditOutput");
        bloguerEditOutput.setValue("Bloguer:   ");
        htmlPanelGrid.getChildren().add(bloguerEditOutput);
        
        AutoComplete bloguerEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        bloguerEditInput.setId("bloguerEditInput");
        bloguerEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mensajeBean.mensaje.bloguer}", Bloguer.class));
        bloguerEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{mensajeBean.completeBloguer}", List.class, new Class[] { String.class }));
        bloguerEditInput.setDropdown(true);
        bloguerEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "bloguer", String.class));
        bloguerEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{bloguer.nombre}", String.class));
        bloguerEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{bloguer}", Bloguer.class));
        bloguerEditInput.setConverter(new BloguerConverter());
        bloguerEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(bloguerEditInput);
        
        Message bloguerEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        bloguerEditInputMessage.setId("bloguerEditInputMessage");
        bloguerEditInputMessage.setFor("bloguerEditInput");
        bloguerEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(bloguerEditInputMessage);
        
        HtmlOutputText contenidoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contenidoEditOutput.setId("contenidoEditOutput");
        contenidoEditOutput.setValue("Contenido: * ");
        htmlPanelGrid.getChildren().add(contenidoEditOutput);
        
        InputTextarea contenidoEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        contenidoEditInput.setId("contenidoEditInput");
        contenidoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mensajeBean.mensaje.contenido}", String.class));
        LengthValidator contenidoEditInputValidator = new LengthValidator();
        contenidoEditInputValidator.setMaximum(140);
        contenidoEditInput.addValidator(contenidoEditInputValidator);
        contenidoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(contenidoEditInput);
        
        Message contenidoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contenidoEditInputMessage.setId("contenidoEditInputMessage");
        contenidoEditInputMessage.setFor("contenidoEditInput");
        contenidoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contenidoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid MensajeBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText bloguerLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bloguerLabel.setId("bloguerLabel");
        bloguerLabel.setValue("Bloguer:   ");
        htmlPanelGrid.getChildren().add(bloguerLabel);
        
        HtmlOutputText bloguerValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        bloguerValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mensajeBean.mensaje.bloguer}", Bloguer.class));
        bloguerValue.setConverter(new BloguerConverter());
        htmlPanelGrid.getChildren().add(bloguerValue);
        
        HtmlOutputText contenidoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contenidoLabel.setId("contenidoLabel");
        contenidoLabel.setValue("Contenido:   ");
        htmlPanelGrid.getChildren().add(contenidoLabel);
        
        InputTextarea contenidoValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        contenidoValue.setId("contenidoValue");
        contenidoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mensajeBean.mensaje.contenido}", String.class));
        contenidoValue.setReadonly(true);
        contenidoValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(contenidoValue);
        
        return htmlPanelGrid;
    }
    
    public Mensaje MensajeBean.getMensaje() {
        if (mensaje == null) {
            mensaje = new Mensaje();
        }
        return mensaje;
    }
    
    public void MensajeBean.setMensaje(Mensaje mensaje) {
        this.mensaje = mensaje;
    }
    
    public List<Bloguer> MensajeBean.completeBloguer(String query) {
        List<Bloguer> suggestions = new ArrayList<Bloguer>();
        for (Bloguer bloguer : Bloguer.findAllBloguers()) {
            String bloguerStr = String.valueOf(bloguer.getNombre());
            if (bloguerStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(bloguer);
            }
        }
        return suggestions;
    }
    
    public String MensajeBean.onEdit() {
        return null;
    }
    
    public boolean MensajeBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void MensajeBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String MensajeBean.displayList() {
        createDialogVisible = false;
        findAllMensajes();
        return "mensaje";
    }
    
    public String MensajeBean.displayCreateDialog() {
        mensaje = new Mensaje();
        createDialogVisible = true;
        return "mensaje";
    }
    
    public String MensajeBean.persist() {
        String message = "";
        if (mensaje.getId() != null) {
            mensaje.merge();
            message = "Successfully updated";
        } else {
            mensaje.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMensajes();
    }
    
    public String MensajeBean.delete() {
        mensaje.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMensajes();
    }
    
    public void MensajeBean.reset() {
        mensaje = null;
        createDialogVisible = false;
    }
    
    public void MensajeBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
