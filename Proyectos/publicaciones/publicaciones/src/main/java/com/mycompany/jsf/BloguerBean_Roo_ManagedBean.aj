// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.jsf;

import com.mycompany.domain.Bloguer;
import com.mycompany.domain.Mensaje;
import com.mycompany.jsf.BloguerBean;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect BloguerBean_Roo_ManagedBean {
    
    declare @type: BloguerBean: @ManagedBean(name = "bloguerBean");
    
    declare @type: BloguerBean: @SessionScoped;
    
    private String BloguerBean.name = "Bloguers";
    
    private Bloguer BloguerBean.bloguer;
    
    private List<Bloguer> BloguerBean.allBloguers;
    
    private boolean BloguerBean.dataVisible = false;
    
    private List<String> BloguerBean.columns;
    
    private HtmlPanelGrid BloguerBean.createPanelGrid;
    
    private HtmlPanelGrid BloguerBean.editPanelGrid;
    
    private HtmlPanelGrid BloguerBean.viewPanelGrid;
    
    private boolean BloguerBean.createDialogVisible = false;
    
    private List<Mensaje> BloguerBean.selectedMensajes;
    
    @PostConstruct
    public void BloguerBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
    }
    
    public String BloguerBean.getName() {
        return name;
    }
    
    public List<String> BloguerBean.getColumns() {
        return columns;
    }
    
    public List<Bloguer> BloguerBean.getAllBloguers() {
        return allBloguers;
    }
    
    public void BloguerBean.setAllBloguers(List<Bloguer> allBloguers) {
        this.allBloguers = allBloguers;
    }
    
    public String BloguerBean.findAllBloguers() {
        allBloguers = Bloguer.findAllBloguers();
        dataVisible = !allBloguers.isEmpty();
        return null;
    }
    
    public boolean BloguerBean.isDataVisible() {
        return dataVisible;
    }
    
    public void BloguerBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid BloguerBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void BloguerBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid BloguerBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void BloguerBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid BloguerBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void BloguerBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid BloguerBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText mensajesCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mensajesCreateOutput.setId("mensajesCreateOutput");
        mensajesCreateOutput.setValue("Mensajes:   ");
        htmlPanelGrid.getChildren().add(mensajesCreateOutput);
        
        HtmlOutputText mensajesCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mensajesCreateInput.setId("mensajesCreateInput");
        mensajesCreateInput.setValue("This relationship is managed from the Mensaje side");
        htmlPanelGrid.getChildren().add(mensajesCreateInput);
        
        Message mensajesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        mensajesCreateInputMessage.setId("mensajesCreateInputMessage");
        mensajesCreateInputMessage.setFor("mensajesCreateInput");
        mensajesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(mensajesCreateInputMessage);
        
        HtmlOutputText nombreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputTextarea nombreCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{bloguerBean.bloguer.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMaximum(50);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid BloguerBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText mensajesEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mensajesEditOutput.setId("mensajesEditOutput");
        mensajesEditOutput.setValue("Mensajes:   ");
        htmlPanelGrid.getChildren().add(mensajesEditOutput);
        
        HtmlOutputText mensajesEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mensajesEditInput.setId("mensajesEditInput");
        mensajesEditInput.setValue("This relationship is managed from the Mensaje side");
        htmlPanelGrid.getChildren().add(mensajesEditInput);
        
        Message mensajesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        mensajesEditInputMessage.setId("mensajesEditInputMessage");
        mensajesEditInputMessage.setFor("mensajesEditInput");
        mensajesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(mensajesEditInputMessage);
        
        HtmlOutputText nombreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputTextarea nombreEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{bloguerBean.bloguer.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMaximum(50);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid BloguerBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText mensajesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mensajesLabel.setId("mensajesLabel");
        mensajesLabel.setValue("Mensajes:   ");
        htmlPanelGrid.getChildren().add(mensajesLabel);
        
        HtmlOutputText mensajesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        mensajesValue.setId("mensajesValue");
        mensajesValue.setValue("This relationship is managed from the Mensaje side");
        htmlPanelGrid.getChildren().add(mensajesValue);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:   ");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        InputTextarea nombreValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{bloguerBean.bloguer.nombre}", String.class));
        nombreValue.setReadonly(true);
        nombreValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nombreValue);
        
        return htmlPanelGrid;
    }
    
    public Bloguer BloguerBean.getBloguer() {
        if (bloguer == null) {
            bloguer = new Bloguer();
        }
        return bloguer;
    }
    
    public void BloguerBean.setBloguer(Bloguer bloguer) {
        this.bloguer = bloguer;
    }
    
    public List<Mensaje> BloguerBean.getSelectedMensajes() {
        return selectedMensajes;
    }
    
    public void BloguerBean.setSelectedMensajes(List<Mensaje> selectedMensajes) {
        if (selectedMensajes != null) {
            bloguer.setMensajes(new HashSet<Mensaje>(selectedMensajes));
        }
        this.selectedMensajes = selectedMensajes;
    }
    
    public String BloguerBean.onEdit() {
        if (bloguer != null && bloguer.getMensajes() != null) {
            selectedMensajes = new ArrayList<Mensaje>(bloguer.getMensajes());
        }
        return null;
    }
    
    public boolean BloguerBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void BloguerBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String BloguerBean.displayList() {
        createDialogVisible = false;
        findAllBloguers();
        return "bloguer";
    }
    
    public String BloguerBean.displayCreateDialog() {
        bloguer = new Bloguer();
        createDialogVisible = true;
        return "bloguer";
    }
    
    public String BloguerBean.persist() {
        String message = "";
        if (bloguer.getId() != null) {
            bloguer.merge();
            message = "Successfully updated";
        } else {
            bloguer.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllBloguers();
    }
    
    public String BloguerBean.delete() {
        bloguer.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllBloguers();
    }
    
    public void BloguerBean.reset() {
        bloguer = null;
        selectedMensajes = null;
        createDialogVisible = false;
    }
    
    public void BloguerBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
