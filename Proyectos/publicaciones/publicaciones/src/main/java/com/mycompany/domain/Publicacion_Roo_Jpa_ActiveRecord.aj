// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.domain;

import com.mycompany.domain.Publicacion;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Publicacion_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Publicacion.entityManager;
    
    public static final EntityManager Publicacion.entityManager() {
        EntityManager em = new Publicacion().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Publicacion.countPublicacions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Publicacion o", Long.class).getSingleResult();
    }
    
    public static List<Publicacion> Publicacion.findAllPublicacions() {
        return entityManager().createQuery("SELECT o FROM Publicacion o", Publicacion.class).getResultList();
    }
    
    public static Publicacion Publicacion.findPublicacion(Integer codigo) {
        if (codigo == null) return null;
        return entityManager().find(Publicacion.class, codigo);
    }
    
    public static List<Publicacion> Publicacion.findPublicacionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Publicacion o", Publicacion.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Publicacion.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Publicacion.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Publicacion attached = Publicacion.findPublicacion(this.codigo);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Publicacion.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Publicacion.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Publicacion Publicacion.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Publicacion merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
	
	public static List<Publicacion> Publicacion.listarPublicacionPorTituloODescripcion(String cadena) {
		return entityManager().createQuery("SELECT o FROM Publicacion o " +
				"where upper(o.titulo) like upper(:cadena) or " +
				"upper(o.descripcion) like upper(:cadena)", 
				Publicacion.class).setParameter("cadena",'%'+cadena+'%').
				getResultList();
	}

	
    
}
