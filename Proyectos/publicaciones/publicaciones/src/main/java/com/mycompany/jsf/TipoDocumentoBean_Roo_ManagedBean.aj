// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.jsf;

import com.mycompany.domain.TipoDocumento;
import com.mycompany.domain.Usuario;
import com.mycompany.jsf.TipoDocumentoBean;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TipoDocumentoBean_Roo_ManagedBean {
    
    declare @type: TipoDocumentoBean: @ManagedBean(name = "tipoDocumentoBean");
    
    declare @type: TipoDocumentoBean: @SessionScoped;
    
    private String TipoDocumentoBean.name = "TipoDocumentoes";
    
    private TipoDocumento TipoDocumentoBean.tipoDocumento;
    
    private List<TipoDocumento> TipoDocumentoBean.allTipoDocumentoes;
    
    private boolean TipoDocumentoBean.dataVisible = false;
    
    private List<String> TipoDocumentoBean.columns;
    
    private HtmlPanelGrid TipoDocumentoBean.createPanelGrid;
    
    private HtmlPanelGrid TipoDocumentoBean.editPanelGrid;
    
    private HtmlPanelGrid TipoDocumentoBean.viewPanelGrid;
    
    private boolean TipoDocumentoBean.createDialogVisible = false;
    
    private List<Usuario> TipoDocumentoBean.selectedUsuarios;
    
    @PostConstruct
    public void TipoDocumentoBean.init() {
        columns = new ArrayList<String>();
        columns.add("descripcion");
    }
    
    public String TipoDocumentoBean.getName() {
        return name;
    }
    
    public List<String> TipoDocumentoBean.getColumns() {
        return columns;
    }
    
    public List<TipoDocumento> TipoDocumentoBean.getAllTipoDocumentoes() {
        return allTipoDocumentoes;
    }
    
    public void TipoDocumentoBean.setAllTipoDocumentoes(List<TipoDocumento> allTipoDocumentoes) {
        this.allTipoDocumentoes = allTipoDocumentoes;
    }
    
    public String TipoDocumentoBean.findAllTipoDocumentoes() {
        allTipoDocumentoes = TipoDocumento.findAllTipoDocumentoes();
        dataVisible = !allTipoDocumentoes.isEmpty();
        return null;
    }
    
    public boolean TipoDocumentoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TipoDocumentoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TipoDocumentoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TipoDocumentoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TipoDocumentoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TipoDocumentoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TipoDocumentoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TipoDocumentoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TipoDocumentoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usuariosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usuariosCreateOutput.setId("usuariosCreateOutput");
        usuariosCreateOutput.setValue("Usuarios:   ");
        htmlPanelGrid.getChildren().add(usuariosCreateOutput);
        
        HtmlOutputText usuariosCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usuariosCreateInput.setId("usuariosCreateInput");
        usuariosCreateInput.setValue("This relationship is managed from the Usuario side");
        htmlPanelGrid.getChildren().add(usuariosCreateInput);
        
        Message usuariosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usuariosCreateInputMessage.setId("usuariosCreateInputMessage");
        usuariosCreateInputMessage.setFor("usuariosCreateInput");
        usuariosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usuariosCreateInputMessage);
        
        HtmlOutputText descripcionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion: * ");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputTextarea descripcionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDocumentoBean.tipoDocumento.descripcion}", String.class));
        LengthValidator descripcionCreateInputValidator = new LengthValidator();
        descripcionCreateInputValidator.setMaximum(50);
        descripcionCreateInput.addValidator(descripcionCreateInputValidator);
        descripcionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipoDocumentoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usuariosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usuariosEditOutput.setId("usuariosEditOutput");
        usuariosEditOutput.setValue("Usuarios:   ");
        htmlPanelGrid.getChildren().add(usuariosEditOutput);
        
        HtmlOutputText usuariosEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usuariosEditInput.setId("usuariosEditInput");
        usuariosEditInput.setValue("This relationship is managed from the Usuario side");
        htmlPanelGrid.getChildren().add(usuariosEditInput);
        
        Message usuariosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        usuariosEditInputMessage.setId("usuariosEditInputMessage");
        usuariosEditInputMessage.setFor("usuariosEditInput");
        usuariosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(usuariosEditInputMessage);
        
        HtmlOutputText descripcionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion: * ");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputTextarea descripcionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDocumentoBean.tipoDocumento.descripcion}", String.class));
        LengthValidator descripcionEditInputValidator = new LengthValidator();
        descripcionEditInputValidator.setMaximum(50);
        descripcionEditInput.addValidator(descripcionEditInputValidator);
        descripcionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipoDocumentoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText usuariosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usuariosLabel.setId("usuariosLabel");
        usuariosLabel.setValue("Usuarios:   ");
        htmlPanelGrid.getChildren().add(usuariosLabel);
        
        HtmlOutputText usuariosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        usuariosValue.setId("usuariosValue");
        usuariosValue.setValue("This relationship is managed from the Usuario side");
        htmlPanelGrid.getChildren().add(usuariosValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:   ");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        InputTextarea descripcionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoDocumentoBean.tipoDocumento.descripcion}", String.class));
        descripcionValue.setReadonly(true);
        descripcionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        return htmlPanelGrid;
    }
    
    public TipoDocumento TipoDocumentoBean.getTipoDocumento() {
        if (tipoDocumento == null) {
            tipoDocumento = new TipoDocumento();
        }
        return tipoDocumento;
    }
    
    public void TipoDocumentoBean.setTipoDocumento(TipoDocumento tipoDocumento) {
        this.tipoDocumento = tipoDocumento;
    }
    
    public List<Usuario> TipoDocumentoBean.getSelectedUsuarios() {
        return selectedUsuarios;
    }
    
    public void TipoDocumentoBean.setSelectedUsuarios(List<Usuario> selectedUsuarios) {
        if (selectedUsuarios != null) {
            tipoDocumento.setUsuarios(new HashSet<Usuario>(selectedUsuarios));
        }
        this.selectedUsuarios = selectedUsuarios;
    }
    
    public String TipoDocumentoBean.onEdit() {
        if (tipoDocumento != null && tipoDocumento.getUsuarios() != null) {
            selectedUsuarios = new ArrayList<Usuario>(tipoDocumento.getUsuarios());
        }
        return null;
    }
    
    public boolean TipoDocumentoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TipoDocumentoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TipoDocumentoBean.displayList() {
        createDialogVisible = false;
        findAllTipoDocumentoes();
        return "tipoDocumento";
    }
    
    public String TipoDocumentoBean.displayCreateDialog() {
        tipoDocumento = new TipoDocumento();
        createDialogVisible = true;
        return "tipoDocumento";
    }
    
    public String TipoDocumentoBean.persist() {
        String message = "";
        if (tipoDocumento.getCodigo() != null) {
            tipoDocumento.merge();
            message = "Successfully updated";
        } else {
            tipoDocumento.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoDocumentoes();
    }
    
    public String TipoDocumentoBean.delete() {
        tipoDocumento.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoDocumentoes();
    }
    
    public void TipoDocumentoBean.reset() {
        tipoDocumento = null;
        selectedUsuarios = null;
        createDialogVisible = false;
    }
    
    public void TipoDocumentoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
