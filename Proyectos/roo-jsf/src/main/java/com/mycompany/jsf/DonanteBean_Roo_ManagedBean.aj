// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mycompany.jsf;

import com.mycompany.domain.Donante;
import com.mycompany.domain.Organo;
import com.mycompany.domain.TipoSangre;
import com.mycompany.jsf.DonanteBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import javax.faces.validator.RegexValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect DonanteBean_Roo_ManagedBean {
    
    declare @type: DonanteBean: @ManagedBean(name = "donanteBean");
    
    declare @type: DonanteBean: @SessionScoped;
    
    private String DonanteBean.name = "Donantes";
    
    private Donante DonanteBean.donante;
    
    private List<Donante> DonanteBean.allDonantes;
    
    private boolean DonanteBean.dataVisible = false;
    
    private List<String> DonanteBean.columns;
    
    private HtmlPanelGrid DonanteBean.createPanelGrid;
    
    private HtmlPanelGrid DonanteBean.editPanelGrid;
    
    private HtmlPanelGrid DonanteBean.viewPanelGrid;
    
    private boolean DonanteBean.createDialogVisible = false;
    
    private List<Organo> DonanteBean.selectedOrganos;
    
    @PostConstruct
    public void DonanteBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("fechaNacimiento");
        columns.add("email");
    }
    
    public String DonanteBean.getName() {
        return name;
    }
    
    public List<String> DonanteBean.getColumns() {
        return columns;
    }
    
    public List<Donante> DonanteBean.getAllDonantes() {
        return allDonantes;
    }
    
    public void DonanteBean.setAllDonantes(List<Donante> allDonantes) {
        this.allDonantes = allDonantes;
    }
    
    public String DonanteBean.findAllDonantes() {
        allDonantes = Donante.findAllDonantes();
        dataVisible = !allDonantes.isEmpty();
        return null;
    }
    
    public boolean DonanteBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DonanteBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DonanteBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DonanteBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DonanteBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DonanteBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.nombre}", String.class));
        LengthValidator nombreCreateInputValidator = new LengthValidator();
        nombreCreateInputValidator.setMaximum(25);
        nombreCreateInput.addValidator(nombreCreateInputValidator);
        nombreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        HtmlOutputText tipoSangreCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoSangreCreateOutput.setId("tipoSangreCreateOutput");
        tipoSangreCreateOutput.setValue("Tipo Sangre: * ");
        htmlPanelGrid.getChildren().add(tipoSangreCreateOutput);
        
        AutoComplete tipoSangreCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoSangreCreateInput.setId("tipoSangreCreateInput");
        tipoSangreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.tipoSangre}", TipoSangre.class));
        tipoSangreCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{donanteBean.completeTipoSangre}", List.class, new Class[] { String.class }));
        tipoSangreCreateInput.setDropdown(true);
        tipoSangreCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoSangreCreateInput);
        
        Message tipoSangreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoSangreCreateInputMessage.setId("tipoSangreCreateInputMessage");
        tipoSangreCreateInputMessage.setFor("tipoSangreCreateInput");
        tipoSangreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoSangreCreateInputMessage);
        
        HtmlOutputText fechaNacimientoCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNacimientoCreateOutput.setId("fechaNacimientoCreateOutput");
        fechaNacimientoCreateOutput.setValue("Fecha Nacimiento:   ");
        htmlPanelGrid.getChildren().add(fechaNacimientoCreateOutput);
        
        Calendar fechaNacimientoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaNacimientoCreateInput.setId("fechaNacimientoCreateInput");
        fechaNacimientoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.fechaNacimiento}", Date.class));
        fechaNacimientoCreateInput.setNavigator(true);
        fechaNacimientoCreateInput.setEffect("slideDown");
        fechaNacimientoCreateInput.setPattern("dd/MM/yyyy");
        fechaNacimientoCreateInput.setRequired(false);
        fechaNacimientoCreateInput.setMaxdate(new Date());
        htmlPanelGrid.getChildren().add(fechaNacimientoCreateInput);
        
        Message fechaNacimientoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaNacimientoCreateInputMessage.setId("fechaNacimientoCreateInputMessage");
        fechaNacimientoCreateInputMessage.setFor("fechaNacimientoCreateInput");
        fechaNacimientoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaNacimientoCreateInputMessage);
        
        HtmlOutputText emailCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.email}", String.class));
        RegexValidator emailCreateInputRegexValidator = new RegexValidator();
        emailCreateInputRegexValidator.setPattern("[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+");
        emailCreateInput.addValidator(emailCreateInputRegexValidator);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        HtmlOutputText organosCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosCreateOutput.setId("organosCreateOutput");
        organosCreateOutput.setValue("Organos:   ");
        htmlPanelGrid.getChildren().add(organosCreateOutput);
        
        HtmlOutputText organosCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosCreateInput.setId("organosCreateInput");
        organosCreateInput.setValue("This relationship is managed from the Organo side");
        htmlPanelGrid.getChildren().add(organosCreateInput);
        
        Message organosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        organosCreateInputMessage.setId("organosCreateInputMessage");
        organosCreateInputMessage.setFor("organosCreateInput");
        organosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(organosCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre: * ");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.nombre}", String.class));
        LengthValidator nombreEditInputValidator = new LengthValidator();
        nombreEditInputValidator.setMaximum(25);
        nombreEditInput.addValidator(nombreEditInputValidator);
        nombreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        HtmlOutputText tipoSangreEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoSangreEditOutput.setId("tipoSangreEditOutput");
        tipoSangreEditOutput.setValue("Tipo Sangre: * ");
        htmlPanelGrid.getChildren().add(tipoSangreEditOutput);
        
        AutoComplete tipoSangreEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoSangreEditInput.setId("tipoSangreEditInput");
        tipoSangreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.tipoSangre}", TipoSangre.class));
        tipoSangreEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{donanteBean.completeTipoSangre}", List.class, new Class[] { String.class }));
        tipoSangreEditInput.setDropdown(true);
        tipoSangreEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoSangreEditInput);
        
        Message tipoSangreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoSangreEditInputMessage.setId("tipoSangreEditInputMessage");
        tipoSangreEditInputMessage.setFor("tipoSangreEditInput");
        tipoSangreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoSangreEditInputMessage);
        
        HtmlOutputText fechaNacimientoEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNacimientoEditOutput.setId("fechaNacimientoEditOutput");
        fechaNacimientoEditOutput.setValue("Fecha Nacimiento:   ");
        htmlPanelGrid.getChildren().add(fechaNacimientoEditOutput);
        
        Calendar fechaNacimientoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaNacimientoEditInput.setId("fechaNacimientoEditInput");
        fechaNacimientoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.fechaNacimiento}", Date.class));
        fechaNacimientoEditInput.setNavigator(true);
        fechaNacimientoEditInput.setEffect("slideDown");
        fechaNacimientoEditInput.setPattern("dd/MM/yyyy");
        fechaNacimientoEditInput.setRequired(false);
        fechaNacimientoEditInput.setMaxdate(new Date());
        htmlPanelGrid.getChildren().add(fechaNacimientoEditInput);
        
        Message fechaNacimientoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaNacimientoEditInputMessage.setId("fechaNacimientoEditInputMessage");
        fechaNacimientoEditInputMessage.setFor("fechaNacimientoEditInput");
        fechaNacimientoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaNacimientoEditInputMessage);
        
        HtmlOutputText emailEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.email}", String.class));
        RegexValidator emailEditInputRegexValidator = new RegexValidator();
        emailEditInputRegexValidator.setPattern("[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+");
        emailEditInput.addValidator(emailEditInputRegexValidator);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        HtmlOutputText organosEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosEditOutput.setId("organosEditOutput");
        organosEditOutput.setValue("Organos:   ");
        htmlPanelGrid.getChildren().add(organosEditOutput);
        
        HtmlOutputText organosEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosEditInput.setId("organosEditInput");
        organosEditInput.setValue("This relationship is managed from the Organo side");
        htmlPanelGrid.getChildren().add(organosEditInput);
        
        Message organosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        organosEditInputMessage.setId("organosEditInputMessage");
        organosEditInputMessage.setFor("organosEditInput");
        organosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(organosEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DonanteBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:   ");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText tipoSangreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoSangreLabel.setId("tipoSangreLabel");
        tipoSangreLabel.setValue("Tipo Sangre:   ");
        htmlPanelGrid.getChildren().add(tipoSangreLabel);
        
        HtmlOutputText tipoSangreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoSangreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.tipoSangre}", String.class));
        htmlPanelGrid.getChildren().add(tipoSangreValue);
        
        HtmlOutputText fechaNacimientoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNacimientoLabel.setId("fechaNacimientoLabel");
        fechaNacimientoLabel.setValue("Fecha Nacimiento:   ");
        htmlPanelGrid.getChildren().add(fechaNacimientoLabel);
        
        HtmlOutputText fechaNacimientoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaNacimientoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.fechaNacimiento}", Date.class));
        DateTimeConverter fechaNacimientoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaNacimientoValueConverter.setPattern("dd/MM/yyyy");
        fechaNacimientoValue.setConverter(fechaNacimientoValueConverter);
        htmlPanelGrid.getChildren().add(fechaNacimientoValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{donanteBean.donante.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText organosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosLabel.setId("organosLabel");
        organosLabel.setValue("Organos:   ");
        htmlPanelGrid.getChildren().add(organosLabel);
        
        HtmlOutputText organosValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organosValue.setId("organosValue");
        organosValue.setValue("This relationship is managed from the Organo side");
        htmlPanelGrid.getChildren().add(organosValue);
        
        return htmlPanelGrid;
    }
    
    public Donante DonanteBean.getDonante() {
        if (donante == null) {
            donante = new Donante();
        }
        return donante;
    }
    
    public void DonanteBean.setDonante(Donante donante) {
        this.donante = donante;
    }
    
    public List<TipoSangre> DonanteBean.completeTipoSangre(String query) {
        List<TipoSangre> suggestions = new ArrayList<TipoSangre>();
        for (TipoSangre tipoSangre : TipoSangre.values()) {
            if (tipoSangre.name().toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoSangre);
            }
        }
        return suggestions;
    }
    
    public List<Organo> DonanteBean.getSelectedOrganos() {
        return selectedOrganos;
    }
    
    public void DonanteBean.setSelectedOrganos(List<Organo> selectedOrganos) {
        if (selectedOrganos != null) {
            donante.setOrganos(new HashSet<Organo>(selectedOrganos));
        }
        this.selectedOrganos = selectedOrganos;
    }
    
    public String DonanteBean.onEdit() {
        if (donante != null && donante.getOrganos() != null) {
            selectedOrganos = new ArrayList<Organo>(donante.getOrganos());
        }
        return null;
    }
    
    public boolean DonanteBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DonanteBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DonanteBean.displayList() {
        createDialogVisible = false;
        findAllDonantes();
        return "donante";
    }
    
    public String DonanteBean.displayCreateDialog() {
        donante = new Donante();
        createDialogVisible = true;
        return "donante";
    }
    
    public String DonanteBean.persist() {
        String message = "";
        if (donante.getId() != null) {
            donante.merge();
            message = "Successfully updated";
        } else {
            donante.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDonantes();
    }
    
    public String DonanteBean.delete() {
        donante.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDonantes();
    }
    
    public void DonanteBean.reset() {
        donante = null;
        selectedOrganos = null;
        createDialogVisible = false;
    }
    
    public void DonanteBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
